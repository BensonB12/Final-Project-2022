@page "/ThreeByThree/{DOM}/{WAR}/{NEO}/{containBasics}"

<!DOCTYPE html>
<html lang="en">

<link rel="stylesheet" href="css/ThreeByThree.css">

<head>
    <PageTitle>3x3 draft</PageTitle>
</head>

@if (gameOver == false)
{
    @if (stackOCards == null)
    {
        <h1 class="loading">LOADING</h1>
    }
    else
    {
        @if (stackOCards.Count != 0 && step == 0)
        {

            <p class="cardCount">@stackCount</p>

        }

        @if (step == 0)
        {
            <h1>Player @(chosenPlayer + 1), select the stack of cards</h1>
        }

        @if (step == 1)
        {
            <h4>Player @(chosenPlayer + 1), select which row / column you would like</h4>

            int i = 0;

            foreach (var item in listOfImgUrls)
            {
                string id = "";
                if (!personalCards)
                {
                    id = "d" + i.ToString();
                }
                else
                {
                    id = "p" + i.ToString();
                }
                <img class="popUpCards" src="@item" id="@id" />
                i++;
            }

            if (!personalCards)
            {
                if (showingCards[0] != null || showingCards[3] != null || showingCards[6] != null)
                {
                    <button class="column" id="c1" @onclick="AddCardsToPlayersListc1">column 1</button>
                    <div class="c1Line"></div>
                }

                if (showingCards[1] != null || showingCards[4] != null || showingCards[7] != null)
                {
                    <button class="column" id="c2" @onclick="AddCardsToPlayersListc2">column 2</button>
                    <div class="c2Line"></div>
                }

                if (showingCards[2] != null || showingCards[5] != null || showingCards[8] != null)
                {
                    <button class="column" id="c3" @onclick="AddCardsToPlayersListc3">column 3</button>
                    <div class="c3Line"></div>
                }

                if (showingCards[0] != null || showingCards[1] != null || showingCards[2] != null)
                {
                    <button class="row" id="r1" @onclick="AddCardsToPlayersListr1">row 1</button>
                    <div class="r1Line"></div>
                }

                if (showingCards[3] != null || showingCards[4] != null || showingCards[5] != null)
                {
                    <button class="row" id="r2" @onclick="AddCardsToPlayersListr2">row 2</button>
                    <div class="r2Line"></div>
                }

                if (showingCards[6] != null || showingCards[7] != null || showingCards[8] != null)
                {
                    <button class="row" id="r3" @onclick="AddCardsToPlayersListr3">row 3</button>
                    <div class="r3Line"></div>
                }
            }

            @if (!personalCards)
            {
                if (chosenPlayer == 0)
                {
                    <button id="cardPile1" @onclick="ShowPlayerPile">Show Player 1's cards (@player1CardCount)</button>
                }
                else
                {
                    <button id="cardPile2" @onclick="ShowPlayerPile">Show Player 2's cards (@player2CardCount)</button>
                }
            }
            else
            {
                <button id="cardPile2" @onclick="ShowPlayerPile">Go back</button>
            }
        }

        @if (stackOCards.Count != 0 && step == 0)
        {
            <img id="focus" class="stackOcards" src="BackOfMTGCard.jpg" alt="Back of a MTG card" @onclick="NextStep">
        }

    }
}
else
{
    <ul>Player 1's Deck list for arena</ul>
    @foreach (var cards in bothPlayersLists[0])
    {
        <li>1 @cards.Name</li>
    }
    <br>
    <br>
    <ul>Player 2's Deck list for arena</ul>
    @foreach (var cards in bothPlayersLists[1])
    {
        <li>1 @cards.Name</li>
    }
}

</html>

@code {
    [Parameter]
    public string containBasics { get; set; }
    [Parameter]
    public string DOM { get; set; }
    [Parameter]
    public string WAR { get; set; }
    [Parameter]
    public string NEO { get; set; }
    int startingPlayer = 0;
    string c1 = "c1";
    string c2 = "c2";
    string c3 = "c3";
    string r1 = "r1";
    string r2 = "r2";
    string r3 = "r3";
    public List<Winston.CardModel> stackOCards = null;
    public List<Winston.CardModel> showingCards = new List<Winston.CardModel>();
    public List<Winston.CardModel> oldShowingCards = new List<Winston.CardModel>();
    public List<Winston.CardModel> Player1List = new List<Winston.CardModel>();
    public List<Winston.CardModel> Player2List = new List<Winston.CardModel>();
    public List<Winston.CardModel>[] bothPlayersLists = new List<Winston.CardModel>[2];
    public List<string> listOfImgUrls = new List<string>();
    public List<string> oldListOfImgUrls = new List<string>();
    int player1CardCount = 0;
    int player2CardCount = 0;
    int stackCount;
    int chosenPlayer = 0;
    int step = 0;
    int BothPlayersListsCount = 0;
    bool personalCards = false;
    bool gameOver = false;

    protected override async Task OnInitializedAsync()
    {
        Winston.General.ApiHelper.InitializeClient();
        Winston.StackOCards aHeapOCards = new Winston.StackOCards();
        stackOCards = await aHeapOCards.MixAllBoosters(int.Parse(DOM), int.Parse(WAR), int.Parse(NEO));

        if(containBasics == "True")
        {
            stackOCards = Winston.General.TakeOutType(stackOCards);
        }

        bothPlayersLists[0] = Player1List;
        bothPlayersLists[1] = Player2List;
        UpDateNumbers();
    }

    public void UpDateNumbers()
    {
        stackCount = stackOCards.Count;
        player1CardCount = bothPlayersLists[0].Count;
        player2CardCount = bothPlayersLists[1].Count;
    }

    public void NextStep()
    {
        step++;

        if (step == 2)
        {
            step = 0;
        }

        switch (step)
        {
            case 0:
                break;
            case 1:
                Show9Cards();
                break;
            default:
                throw new Exception("NextStep in the switch (step) statement");
        }
    }

    public void Show9Cards()
    {
        listOfImgUrls = new List<string>();
        showingCards = new List<Winston.CardModel>();

        for (int q = 0; q < 9; q++)
        {
            showingCards.Add(stackOCards[0]);
            listOfImgUrls.Add(stackOCards[0].ImageUrl);
            stackOCards.RemoveAt(0);
        }

        UpDateNumbers();
    }

    public void AddCardsToPlayersListc1()
    {
        AddCardsToPlayersList("c1");
    }

    public void AddCardsToPlayersListc2()
    {
        AddCardsToPlayersList("c2");
    }

    public void AddCardsToPlayersListc3()
    {
        AddCardsToPlayersList("c3");
    }

    public void AddCardsToPlayersListr1()
    {
        AddCardsToPlayersList("r1");
    }

    public void AddCardsToPlayersListr2()
    {
        AddCardsToPlayersList("r2");
    }

    public void AddCardsToPlayersListr3()
    {
        AddCardsToPlayersList("r3");
    }

    public void AddCardsToPlayersList(string colOrRow)
    {
        switch (colOrRow)
        {
            case "c1":
                AddingThenSubtractingFromLists(0);
                AddingThenSubtractingFromLists(3);
                AddingThenSubtractingFromLists(6);
                break;
            case "c2":
                AddingThenSubtractingFromLists(1);
                AddingThenSubtractingFromLists(4);
                AddingThenSubtractingFromLists(7);
                break;
            case "c3":
                AddingThenSubtractingFromLists(2);
                AddingThenSubtractingFromLists(5);
                AddingThenSubtractingFromLists(8);
                break;
            case "r1":
                AddingThenSubtractingFromLists(0);
                AddingThenSubtractingFromLists(1);
                AddingThenSubtractingFromLists(2);
                break;
            case "r2":
                AddingThenSubtractingFromLists(3);
                AddingThenSubtractingFromLists(4);
                AddingThenSubtractingFromLists(5);
                break;
            case "r3":
                AddingThenSubtractingFromLists(6);
                AddingThenSubtractingFromLists(7);
                AddingThenSubtractingFromLists(8);
                break;
            default:
                throw new Exception("At 'AddCardsToPlayersList' the switch statement got to default");
        }

        int k = 0;

        foreach (var card in showingCards)
        {
            if (card == null)
            {
                k++;
            }
        }

        if (k == 9)
        {
            startingPlayer++;

            if (startingPlayer == 2)
            {
                startingPlayer = 0;
            }

            chosenPlayer = startingPlayer;

            if (stackOCards.Count == 0)
            {
                gameOver = true;
            }
            else
            {
                NextStep();
            }

            UpDateNumbers();
            return;
        }

        chosenPlayer++;

        if (chosenPlayer == 2)
        {
            chosenPlayer = 0;
        }

        UpDateNumbers();
    }

    public void AddingThenSubtractingFromLists(int card)
    {
        if (showingCards[card] != null)
        {
            bothPlayersLists[chosenPlayer].Add(showingCards[card]);
            showingCards[card] = null;
            listOfImgUrls[card] = "";
        }
    }

    public void ShowPlayerPile()
    {
        if (!personalCards)
        {
            oldShowingCards = showingCards;
            personalCards = true;
            oldListOfImgUrls = listOfImgUrls;
            listOfImgUrls = new List<string>();
            showingCards = new List<Winston.CardModel>();

            foreach (var card in bothPlayersLists[chosenPlayer])
            {
                listOfImgUrls.Add(card.ImageUrl);
            }
        }
        else
        {
            listOfImgUrls = oldListOfImgUrls;
            showingCards = oldShowingCards;
            personalCards = false;
        }
    }
}

@*
    foreach (var card in bothPlayers[chosenPlayer])
    {
    PrintImage(card);
    }
    playerPileSwitch = true;
    } *@