@page "/WinstonDraft/{DOM}/{WAR}/{NEO}"

<PageTitle>Winston Draft</PageTitle>

<head>
    <link rel="stylesheet" href="css/WinstonDraft.css">
</head>

@if (gameOver == false)
{

    @if (stackOCards == null)
    {
        <h1 class="loading">LOADING</h1>
    }
    else
    {
        @if (chosenPlayer == 0)
        {
            <h2 class="player1">Player 1's turn</h2>
            <button id="cardPile" @onclick="ShowPlayerPile">Show drafted cards (@player1CardCount)</button>
        }
        else
        {
            <h2 class="player2">Player 2's turn</h2>
            <button id="cardPile" @onclick="ShowPlayerPile">Show drafted cards (@player2CardCount)</button>
        }

        @if (playerPileSwitch == true)
        {
            <button id="cardPile" @onclick="HidePlayerPile">Back to piles</button>
        }

        <div>
            @if (allPiles[0].Count > 0)
            {
                <p class="cardCount" id="one">@pile1Count</p>
            }
            @if (allPiles[1].Count > 0)
            {
                <p class="cardCount" id="two">@pile2Count</p>
            }
            @if (allPiles[2].Count > 0)
            {
                <p class="cardCount" id="three">@pile3Count</p>
            }
            @if (allPiles[3].Count > 0)
            {
                <p class="cardCount" id="four">@pile4Count</p>
            }
            @if (stackOCards.Count > 0)
            {
                <p class="cardCount" id="five">@deckAmount</p>
            }

            <p>
                @if (chosenPile == 0 && (allPiles[0].Count > 0) && popUpCards == false)
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" @onclick="ShowPile" width="10%" height="10%"
            class="img1" id="focus">
                }
                else if (allPiles[0].Count > 0 && chosenPile != 0 || playerPileSwitch == true)
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" width="10%" height="10%" class="img1">
                }
                else if (allPiles[0].Count > 0)
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" width="10%" height="10%" class="img1" id="fade">
                }
                else
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" width="10%" height="10%" class="img1" id="gone">
                }

                @if (chosenPile == 1 && allPiles[1].Count > 0 && popUpCards == false)
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" @onclick="ShowPile" width="10%" height="10%"
            class="img2" id="focus">
                }
                else if (allPiles[1].Count > 0 && chosenPile != 1 || playerPileSwitch == true)
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" width="10%" height="10%" class="img2">
                }
                else if (allPiles[1].Count > 0)
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" width="10%" height="10%" class="img2" id="fade">
                }
                else
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" width="10%" height="10%" class="img2" id="gone">
                }

                @if (chosenPile == 2 && allPiles[2].Count > 0 && popUpCards == false)
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" @onclick="ShowPile" width="10%" height="10%"
            class="img3" id="focus">
                }
                else if (allPiles[2].Count > 0 && chosenPile != 2 || playerPileSwitch == true)
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" width="10%" height="10%" class="img3">
                }
                else if (allPiles[2].Count > 0)
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" width="10%" height="10%" class="img3" id="fade">
                }
                else
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" width="10%" height="10%" class="img3" id="gone">
                }

                @if (chosenPile == 3 && allPiles[3].Count > 0 && popUpCards == false)
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" @onclick="ShowPile" width="10%" height="10%"
            class="img4" id="focus">
                }
                else if (allPiles[3].Count > 0 && chosenPile != 3 || forceCard == true || playerPileSwitch == true)
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" width="10%" height="10%" class="img4">
                }
                else if (allPiles[3].Count > 0)
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" width="10%" height="10%" class="img4" id="fade">
                }else
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" width="10%" height="10%" class="img4" id="gone">
                }

                @if (stackOCards.Count != 0 && forceCard == false)
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" width="10%" height="10%" class="img5">
                }
                else if (stackOCards.Count != 0 && forceCard == true)
                {
                    <img src="BackOfMTGCard.jpg" alt="Back of a Magic card" width="10%" height="10%" class="img5" id="fade">
                }
@* 
                @if (gameOver == true)
                {
                <div class="square"></div>
                <NavLink href="ImportDecks">
                    <button class="endIt" @onclick="PrintDeckLists">Click here to see decks</button>
                </NavLink>
                } *@
            </p>
        </div>

        @if (popUpCards == true)
        {
            <div class="square"></div>

            int i = 0;
            foreach (var item in listOfImgUrls)
            {
                string id = "d" + i.ToString();
                <img class="popUpCards" src="@item" id="@id" />
                i++;
            }

            if (playerPileSwitch == false && forceCard == false)
            {
                <button class="choose" @onclick="ChoosePack">Choose Pile</button>
                <button class="pass" @onclick="PassPack">Pass Pile</button>
            }

        }

        @if (forceCard == true && playerPileSwitch == false)
        {
            @if (stackOCards.Count != 0)
            {
                <h1 class="forceCard">This is your card from the top of the deck</h1>
            }
            else
            {
                <h1 class="forceCard">Sorry, no card off the top of the deck</h1>
            }
            <button class="forceButton" @onclick="Continue">continue</button>
        }
    }
}
else
{
    <h1>Player 1's Deck list for arena</h1>
    @foreach (var cards in bothPlayers[0])
    {
        <ul>1 @cards.Name</ul>
    }
    <br>
    <br>
    <h1>Player 2's Deck list for arena</h1>
    @foreach (var cards in bothPlayers[1])
    {
        <ul>1 @cards.Name</ul>
    }
}








@code {
    [Parameter]
    public string DOM { get; set; }
    [Parameter]
    public string WAR { get; set; }
    [Parameter]
    public string NEO { get; set; }
    public List<Winston.CardModel> stackOCards = null;
    public List<Winston.CardModel> pile1 = new List<Winston.CardModel>();
    public List<Winston.CardModel> pile2 = new List<Winston.CardModel>();
    public List<Winston.CardModel> pile3 = new List<Winston.CardModel>();
    public List<Winston.CardModel> pile4 = new List<Winston.CardModel>();
    public List<Winston.CardModel>[] allPiles = new List<Winston.CardModel>[4];
    public List<Winston.CardModel>[] bothPlayers = new List<Winston.CardModel>[2];
    public List<Winston.CardModel> player1Stack = new List<Winston.CardModel>();
    public List<Winston.CardModel> player2Stack = new List<Winston.CardModel>();
    int deckAmount;
    int pile1Count;
    int pile2Count;
    int pile3Count;
    int pile4Count;
    int player1CardCount;
    int player2CardCount;
    int chosenPile = 0;
    int chosenPlayer = 0;
    bool popUpCards = false;
    bool oldPop = false;
    bool forceCard = false;
    bool playerPileSwitch = false;
    bool canMoveOn = false;
    bool gameOver = false;
    public List<string> listOfImgUrls = new List<string>();
    public List<string> oldImgUrls = new List<string>();

    public async void ShowPile()
    {
        listOfImgUrls = new List<string>();
        var pile = allPiles[chosenPile];

        foreach (var card in pile)
        {
            PrintImage(card);
        }
        popUpCards = true;
    }


    public void SwitchARoo()
    {
        var tempCP = chosenPile;

        if (CheckForCards() == true && gameOver == false)
        {
            allPiles[tempCP].Add(stackOCards[0]);
            stackOCards.RemoveAt(0);
        }
    }
    public void PrintImage(Winston.CardModel card)
    {
        listOfImgUrls.Add(card.ImageUrl);
    }

    protected override async Task OnInitializedAsync()
    {
        Winston.General.ApiHelper.InitializeClient();
        Winston.StackOCards aHeapOCards = new Winston.StackOCards();
        stackOCards = await aHeapOCards.MixAllBoosters(int.Parse(DOM), int.Parse(WAR), int.Parse(NEO));
        pile1.Add(stackOCards[0]);
        pile2.Add(stackOCards[1]);
        pile3.Add(stackOCards[2]);
        pile4.Add(stackOCards[3]);
        for (int i = 0; i < 4; i++)
        {
            stackOCards.RemoveAt(0);
        }
        allPiles = new List<Winston.CardModel>[4] { pile1, pile2, pile3, pile4 };
        bothPlayers = new List<Winston.CardModel>[2] { player1Stack, player2Stack };
        UpDateNumbers();
    }

    protected override void OnParametersSet()
    {
        var numOfDom = DOM;
        var numOfWar = WAR;
        var numOfNeo = NEO;
    }

    public void ChoosePack()
    {
        if (stackOCards.Count == 0)
        {
            if (IsThisTheLastOne() == true)
            {
                popUpCards = false;
                UpDateNumbers();
                return;
            }
        }
        var tempCPile = chosenPile;
        bothPlayers[chosenPlayer].AddRange(allPiles[chosenPile]);
        allPiles[chosenPile] = new List<Winston.CardModel>();
        SwitchARoo();

        if (allPiles[0].Count != 0)
        {
            chosenPile = 0;
        }
        else if (allPiles[1].Count != 0)
        {
            chosenPile = 1;
        }
        else if (allPiles[2].Count != 0)
        {
            chosenPile = 2;
        }
        else if (allPiles[3].Count != 0)
        {
            chosenPile = 3;
        }
        else
        {
            throw new Exception("GameOver did not work and got to 'ChoosePack's' (if/else if) else statemsnts. ");
        }


        if (tempCPile != 3)
        {
            chosenPlayer++;
            if (chosenPlayer == 2)
            {
                chosenPlayer = 0;
            }
        }
        popUpCards = false;
        UpDateNumbers();
    }

    public void PassPack()
    {
        if (chosenPile == 3)
        {
            listOfImgUrls.Clear();

            if (stackOCards.Count != 0)
            {
                PrintImage(stackOCards[0]);
            }
            else
            {

            }

            forceCard = true;
            return;
        }
        SwitchARoo();
        popUpCards = false;
        UpDateNumbers();
    }

    public void ShowPlayerPile()
    {
        oldPop = popUpCards;
        popUpCards = true;
        oldImgUrls = listOfImgUrls;
        listOfImgUrls = new List<string>();
        foreach (var card in bothPlayers[chosenPlayer])
        {
            PrintImage(card);
        }
        playerPileSwitch = true;
    }

    public void HidePlayerPile()
    {
        popUpCards = oldPop;
        playerPileSwitch = false;
        listOfImgUrls = oldImgUrls;
    }

    public void UpDateNumbers()
    {
        pile1Count = allPiles[0].Count;
        pile2Count = allPiles[1].Count;
        pile3Count = allPiles[2].Count;
        pile4Count = allPiles[3].Count;
        deckAmount = stackOCards.Count;
        player1CardCount = bothPlayers[0].Count;
        player2CardCount = bothPlayers[1].Count;
    }

    public void Continue()
    {
        if (stackOCards.Count != 0)
        {
            bothPlayers[chosenPlayer].Add(stackOCards[0]);
            stackOCards.RemoveAt(0);
        }

        if (CheckForCards() == true && gameOver == false)
        {
            allPiles[3].Add(stackOCards[0]);
            stackOCards.RemoveAt(0);
        }

        UpDateNumbers();
        forceCard = false;
        popUpCards = false;
    }

    public bool CheckForCards()
    {

        chosenPile++;

        do
        {
            if (chosenPile == 4)
            {
                chosenPile = 0;

                //add a warning right here about passing the pack

                chosenPlayer++;

                if (chosenPlayer == 2)
                {
                    chosenPlayer = 0;
                }
            }

            if (allPiles[chosenPile].Count == 0)
            {
                chosenPile++;
                canMoveOn = false;
            }
            else
            {
                canMoveOn = true;
            }

            if (allPiles[0].Count == 0 && allPiles[1].Count == 0 && allPiles[2].Count == 0 && allPiles[3].Count == 0 &&
            stackOCards.Count == 0)
            {
                gameOver = true;
                break;
            }

        } while (canMoveOn == false);

        if (stackOCards.Count == 0)
        {
            return false;
        }

        return true;
    }

    public bool IsThisTheLastOne()
    {
        int j = 0;
        foreach (var item in allPiles)
        {
            if (item.Count == 0)
            {
                j++;
            }
        }
        if (j >= 3)
        {
            bothPlayers[chosenPlayer].AddRange(allPiles[chosenPile]);
            allPiles[chosenPile].Clear();
            gameOver = true;
            return true;
        }
        return false;
    }
}
@* public void PrintDeckLists()
{
    var writer = new StreamWriter("Player1.txt");

    foreach (var cards in bothPlayers[0])
    {
        writer.WriteLine("1 " + cards.Name);
    }
    writer.Close();

    writer = new StreamWriter("Player2.txt");

    foreach (var cards in bothPlayers[1])
    {
        writer.WriteLine("1 " + cards.Name);
    }
    writer.Close();
} *@


@* private string? imageSource;
    public async Task ShowImage()
    {
    var card = await Winston.CardProcessor.LoadNonLand(Winston.Set.WAR, Winston.Rarity.uncommon);

    var uriSource = new Uri(card.ImageUrl, UriKind.Absolute);

    imageSource = uriSource.ToString();
    }

    private async void Window_Loaded()
    {
    await ShowImage();
    }
    public async void ShowCard()
    {
    popUpCards = true;
    Winston.General.ApiHelper.InitializeClient();
    Winston.MakeBooster booster = new Winston.MakeBooster(Winston.Set.NEO);
    PrintingImage(await booster.singleCard);
    } *@