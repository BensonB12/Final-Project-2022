@page "/Fof/{DOM}/{WAR}/{NEO}/{containBasics}"
@using Winston
@inject NavigationManager UriHelper

<!DOCTYPE html>
<html lang="en">

<link rel="stylesheet" href="css/Fof.css">

<head>
    <PageTitle>F.O.F. draft</PageTitle>
</head>

<body>
    @if (StaticPileOfCards.PileOfCards == null)
    {
        <h1 class="loading">LOADING</h1>
    }
    else if (!StaticPileOfCards.GameOver)
    {
        <h1>You are player @thisPlayer</h1>

        @if (StaticPileOfCards.onlyOnePlayer)
        {
            <p class="invite">Copy this Url and send it to player 2</p>
        }

        <p>It is @StaticPileOfCards.chosenPlayer's turn. Player @StaticPileOfCards.chosenPlayer select the card pile</p>

        @if (tooManyPlayers == true)
        {
            <div class="square"></div>
            throw new Exception("Too many Players");
        }

        if (StaticPileOfCards.PileOfCards.Count == 0)
        {
        }
        else if (StaticPileOfCards.chosenPlayer == thisPlayer && (!StaticPileOfCards.BoolPopUpCards &&
        !StaticPileOfCards.otherPlayerCanSee))
        {
            <img class="stackOcards" src="BackOfMTGCard.jpg" alt="Back of a MTG card" id="focus"
        @onclick="ShowTheFiveCardsToChosenPlayer" draggable="false">
            <div class="cardCount">@StaticPileOfCards.PileOfCards.Count</div>
        }
        else
        {
            <img class="stackOcards" src="BackOfMTGCard.jpg" alt="Back of a MTG card" draggable="false">
            <div class="cardCount">@StaticPileOfCards.PileOfCards.Count</div>
        }

        @if (StaticPileOfCards.BoolPopUpCards && StaticPileOfCards.chosenPlayer == thisPlayer)
        {
            <CardsContainer Cards="CardsForChoice" OnStatusUpdated="HandleStatusUpdated">
                <CardList ListStatus="CardStatus.Pile1FaceUp" />
                <CardList ListStatus="Winston.CardStatus.Pile2FaceDown" />
            </CardsContainer>

            <button @onclick="ShowTheOtherPlayer" class="done">Done</button>
        }

        @if (StaticPileOfCards.otherPlayerCanSee)
        {
            <p>Player @StaticPileOfCards.chosenPlayer, pick your pile</p>

            int i = 0;

            @foreach (var card in StaticPileOfCards.PopUpCards.Item1)
            {
                string id = "d" + $"{i}";

                <img src="@card.ImageUrl" id="@id" class="popUpCards">

                i++;
            }

            i = 0;

            @foreach (var card in StaticPileOfCards.PopUpCards.Item2)
            {
                string id = "q" + $"{i}";

                <img src="BackOfMTGCard.jpg" id="@id" class="popUpCards">

                i++;
            }

            <div id="FaceUpCardContainer" class="card-container">
            </div>

            <div id="FaceDownCardContainer" class="card-container">
            </div>

            @if (StaticPileOfCards.chosenPlayer == thisPlayer)
            {
                <button @onclick="Pile1" class="btChoosePile1">Pile 1</button>
                <br><br><br><br><br><br>
                <br><br><br><br><br><br>
                <button @onclick="Pile2" class="btChoosePile2">Pile 2</button>
            }

        }

        @if (player1popupCards)
        {
            <div class="square"></div>
            int i = 0;

            foreach (var item in StaticPileOfCards.Player1Cards)
            {
                string id = "p" + i.ToString();
                <img class="popUpCards" src="@item.ImageUrl" id="@id" />
                i++;
            }

            <button class="HideShownCards" @onclick="ShowPersonalCards">Hide Drafted Cards</button>
        }

        @if (player2popupCards)
        {
            int i = 0;
            <div class="square"></div>

            foreach (var item in StaticPileOfCards.Player2Cards)
            {
                string id = "p" + i.ToString();
                <img class="popUpCards" src="@item.ImageUrl" id="@id" />
                i++;
            }

            <button class="HideShownCards" @onclick="ShowPersonalCards">Hide Drafted Cards</button>
        }

        <button @onclick="ShowPersonalCards" class="seeDraftedCards">Veiw Drafted Cards</button>
        <button @onclick="Update" class="update">Update</button>
        <button @onclick="Exit" class="exit">Exit</button>
    }
    else
    {
        if (thisPlayer == 1)
        {
            @foreach (var cardName in StaticPileOfCards.Player1Cards)
            {
                <li>1 @cardName.Name</li>
            }
        }
        else
        {
            @foreach (var cardName in StaticPileOfCards.Player2Cards)
            {
                <li>1 @cardName.Name</li>
            }
        }
    }

</body>
<footer>
    <h6 class="policy">Winston_MTG is unofficial Fan Content permitted under the Fan Content Policy. Not
        approved/endorsed by Wizards. Portions of the materials used are property of Wizards of the Coast. Â©Wizards of
        the Coast LLC.</h6>
</footer>

</html>

@code {
    [Parameter]
    public string DOM { get; set; }
    [Parameter]
    public string WAR { get; set; }
    [Parameter]
    public string NEO { get; set; }
    [Parameter]
    public string containBasics { get; set; }
    public int thisPlayer = 0;
    public bool tooManyPlayers = false;
    public double imageY = 0;
    public bool player1popupCards = false;
    public bool player2popupCards = false;
    List<CardModelHTML> CardsForChoice = new List<CardModelHTML>();

    public void Pile1()
    {
        PlrChosePile(1);
    }

    public void Pile2()
    {
        PlrChosePile(2);
    }

    protected override async Task OnInitializedAsync()
    {
        if (StaticPileOfCards.Using == false)
        {
            General.ApiHelper.InitializeClient();
            Winston.StackOCards aHeapOCards = new Winston.StackOCards();
            StaticPileOfCards.PileOfCards = await aHeapOCards.MixAllBoosters(int.Parse(DOM), int.Parse(WAR), int.Parse(NEO));

            if (containBasics == "True")
            {
                StaticPileOfCards.PileOfCards = Winston.General.TakeOutType(StaticPileOfCards.PileOfCards);
            }

            StaticPileOfCards.chosenPlayer = 1;
            StaticPileOfCards.Using = true;
            thisPlayer = 1;
        }
        else if (StaticPileOfCards.Player < 3)
        {
            thisPlayer = 2;
            StaticPileOfCards.onlyOnePlayer = false;
            ChangeStatic();
        }
        else
        {
            tooManyPlayers = true;
        }
    }

    public void Exit()
    {
        StaticPileOfCards.PileOfCards = null;
        StaticPileOfCards.Player = 0;
        StaticPileOfCards.Using = false;
        StaticPileOfCards.BoolPopUpCards = false;
        StaticPileOfCards.otherPlayerCanSee = false;
        StaticPileOfCards.chosenPlayer = 1;
        StaticPileOfCards.onlyOnePlayer = true;
        UriHelper.NavigateTo("/PickPacks");
    }

    public void ChangeStatic()
    {
        StaticPileOfCards.Player = StaticPileOfCards.Player + 1;
    }

    public void ShowTheFiveCardsToChosenPlayer()
    {
        if (StaticPileOfCards.chosenPlayer == thisPlayer)
        {
            int cardAmount = 5;

            if (StaticPileOfCards.PileOfCards.Count < 5)
            {
                cardAmount = StaticPileOfCards.PileOfCards.Count;
            }

            int j = 0;

            for (int q = 0; q < cardAmount; q++)
            {
                string id = "d" + j;
                CardsForChoice.Add(new CardModelHTML { Id = $"{id}", card = StaticPileOfCards.PileOfCards[0] });
                StaticPileOfCards.PileOfCards.RemoveAt(0);
                j++;
            }

            StaticPileOfCards.BoolPopUpCards = true;
        }
    }

    public void ShowTheOtherPlayer()
    {
        foreach (var HTMLCard in CardsForChoice)
        {
            if (HTMLCard.Status == CardStatus.Pile1FaceUp)
            {
                StaticPileOfCards.PopUpCards.Item1.Add(HTMLCard.card);
            }
            else
            {
                StaticPileOfCards.PopUpCards.Item2.Add(HTMLCard.card);
            }
        }

        StaticPileOfCards.chosenPlayer++;

        if (StaticPileOfCards.chosenPlayer == 3)
        {
            StaticPileOfCards.chosenPlayer = 1;
        }

        StaticPileOfCards.BoolPopUpCards = false;

        StaticPileOfCards.otherPlayerCanSee = true;
    }

    public void Update()
    {
        StaticPileOfCards.otherPlayerCanSee = StaticPileOfCards.otherPlayerCanSee;
    }

    public void HandleStatusUpdated()
    {
    }

    public void PlrChosePile(int pile)
    {
        StaticPileOfCards.otherPlayerCanSee = false;
        CardsForChoice = new List<CardModelHTML>();

        if (StaticPileOfCards.chosenPlayer == 1)
        {
            if (pile == 1)
            {
                StaticPileOfCards.Player1Cards.AddRange(StaticPileOfCards.PopUpCards.Item1);
                StaticPileOfCards.Player2Cards.AddRange(StaticPileOfCards.PopUpCards.Item2);
            }
            else
            {
                StaticPileOfCards.Player1Cards.AddRange(StaticPileOfCards.PopUpCards.Item2);
                StaticPileOfCards.Player2Cards.AddRange(StaticPileOfCards.PopUpCards.Item1);
            }
        }
        else
        {
            if (pile == 1)
            {
                StaticPileOfCards.Player2Cards.AddRange(StaticPileOfCards.PopUpCards.Item1);
                StaticPileOfCards.Player1Cards.AddRange(StaticPileOfCards.PopUpCards.Item2);
            }
            else
            {
                StaticPileOfCards.Player2Cards.AddRange(StaticPileOfCards.PopUpCards.Item2);
                StaticPileOfCards.Player1Cards.AddRange(StaticPileOfCards.PopUpCards.Item1);
            }
        }

        if (StaticPileOfCards.PileOfCards.Count == 0)
        {
            StaticPileOfCards.GameOver = true;
        }

        StaticPileOfCards.PopUpCards.Item1.Clear();
        StaticPileOfCards.PopUpCards.Item2.Clear();
    }

    public void ShowPersonalCards()
    {
        if (player1popupCards || player2popupCards)
        {
            player1popupCards = false;
            player2popupCards = false;
        }
        else
        {
            if (thisPlayer == 1)
            {
                player1popupCards = true;
            }
            else
            {
                player2popupCards = true;
            }
        }
    }
}
