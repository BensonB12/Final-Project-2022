@page "/Fof/{DOM}/{WAR}/{NEO}/{containBasics}"
@using Winston
@* @using Blazor.DragDrop.Core *@
@using Plk.Blazor.DragDrop;

<!DOCTYPE html>
<html lang="en">

<link rel="stylesheet" href="css/Fof.css">

<head>
    <PageTitle>F.O.F. draft</PageTitle>
</head>

<link rel="stylesheet" href="css/Fof.css">

<body>
    @if (StaticPileOfCards.PileOfCards == null)
    {
        <h1 class="loading">LOADING</h1>
    }
    else
    {
        @if (tooManyPlayers == true)
        {
            <p>WARNING THERE ARE @StaticPileOfCards.Player + PLAYERS, YOUR ARE THE THIRD PLAYER</p>
        }

        <div class="cardCount">@StaticPileOfCards.PileOfCards.Count</div>

        if (StaticPileOfCards.chosenPlayer == thisPlayer && !StaticPileOfCards.BoolPopUpCards)
        {
            <img class="stackOcards" src="BackOfMTGCard.jpg" alt="Back of a MTG card" id="focus"
        @onclick="ShowTheFiveCardsToChosenPlayer">
        }
        else
        {
            <img class="stackOcards" src="BackOfMTGCard.jpg" alt="Back of a MTG card">
        }

        <p>you are player @thisPlayer</p>
        <p>It is @StaticPileOfCards.chosenPlayer's turn. Player @StaticPileOfCards.chosenPlayer select the card pile</p>

        @if ((StaticPileOfCards.BoolPopUpCards && StaticPileOfCards.chosenPlayer == thisPlayer) ||
       StaticPileOfCards.otherPlayerCanSee)
        {
            int i = 0;

            @foreach (var card in StaticPileOfCards.PopUpCards)
            {
                string id = "d" + $"{i}";
                <img src="@card.ImageUrl" id="@id" class="popUpCards" draggable="true" ondragstart="event.dataTransfer.setData('', event.target.id);" aria-dropeffect="move">
                i++;
            }

            <div class="FaceUpCardContainer" ondragover="event.preventDefault();" @ondrop="HandleDropFaceDown">
            </div>

            <div class="FaceDownCardContainer" @ondrop="HandleDropFaceUp" ondragover="event.preventDefault();">
                <h5>Click and drag the cards, this side is for the face down pile</h5>
            </div>

            <button @onclick="ShowTheOtherPlayer">Done</button>
        }

        <button @onclick="Update">Update</button>
        <button @onclick="Exit">Exit</button>

        @* <Plk.Blazor.DragDrop.Dropzone >
        </Plk.Blazor.DragDrop.Dropzone> *@
    }

</body>

</html>

@code {
    [Parameter]
    public string DOM { get; set; }
    [Parameter]
    public string WAR { get; set; }
    [Parameter]
    public string NEO { get; set; }
    [Parameter]
    public string containBasics { get; set; }
    public int thisPlayer = 0;
    public bool tooManyPlayers = false;

    protected override async Task OnInitializedAsync()
    {
        if (StaticPileOfCards.Using == false)
        {
            General.ApiHelper.InitializeClient();
            Winston.StackOCards aHeapOCards = new Winston.StackOCards();
            StaticPileOfCards.PileOfCards = await aHeapOCards.MixAllBoosters(int.Parse(DOM), int.Parse(WAR), int.Parse(NEO));

            if (containBasics == "True")
            {
                StaticPileOfCards.PileOfCards = Winston.General.TakeOutType(StaticPileOfCards.PileOfCards);
            }

            StaticPileOfCards.chosenPlayer = 1;
            StaticPileOfCards.Using = true;
            thisPlayer = 1;
        }
        else if (StaticPileOfCards.Player < 3)
        {
            thisPlayer = 2;
            ChangeStatic();
        }
        else
        {
            tooManyPlayers = true;
        }
    }

    public void Exit()
    {
        StaticPileOfCards.PileOfCards = null;
        StaticPileOfCards.Player = 0;
        StaticPileOfCards.Using = false;
        StaticPileOfCards.BoolPopUpCards = false;
        StaticPileOfCards.otherPlayerCanSee = false;
        StaticPileOfCards.chosenPlayer = 1;
        StaticPileOfCards.PopUpCards = new List<CardModel>();
    }

    public void ChangeStatic()
    {
        StaticPileOfCards.Player = StaticPileOfCards.Player + 1;
    }

    public void ShowTheFiveCardsToChosenPlayer()
    {
        if (StaticPileOfCards.chosenPlayer == thisPlayer)
        {
            int cardAmount = 5;

            if (StaticPileOfCards.PileOfCards.Count < 5)
            {
                cardAmount = StaticPileOfCards.PileOfCards.Count;
            }

            for (int q = 0; q < cardAmount; q++)
            {
                StaticPileOfCards.PopUpCards.Add(StaticPileOfCards.PileOfCards[0]);
                StaticPileOfCards.PileOfCards.RemoveAt(0);
            }

            StaticPileOfCards.BoolPopUpCards = true;
        }
    }

    public void ShowTheOtherPlayer()
    {
        StaticPileOfCards.otherPlayerCanSee = true;
    }

    public void Update()
    {
        StaticPileOfCards.otherPlayerCanSee = StaticPileOfCards.otherPlayerCanSee;
    }

    public void HandleDropFaceUp()
    {
        
    }

    public void HandleDropFaceDown()
    {

    }
}
